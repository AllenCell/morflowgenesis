working_dir: //allen/aics/assay-dev/users/Benji/CurrentProjects/seg_quality_across_colonies/replicate2
deployment_name: lamin_transfer_function_validation
work_pool_name: k8s

local_run: true


pull:
    repository: https://github.com/aics-int/morflowgenesis.git
    branch: dev_benji
    secret_block_name: dev-morflowgenesis-benji-pat

path: morflowgenesis
entrypoint: morflowgenesis/bin/run_workflow.py:morflowgenesis

base_image: docker-modeling-local.artifactory.corp.alleninstitute.org/mlops/morflowgenesis:v0.0.2

#kubernetes cluster infra overrides
infra_overrides:
    #  don't use latest in production
    image: ${base_image}
    image_pull_policy: Always
    namespace: "prefect"
    resources:
        limits:
            cpu: "256000m"
            memory: "400Gi"
        requests:
            cpu: "100000m"
            memory: "200Gi"

# dask cluster overrides
dask_cluster:      
    adapt_kwargs:
      maximum: 100
    cluster_kwargs:
        # dask worker args
        pod_template:
            image: ${base_image}
            extra_pod_config:
                volumes:
                    - name: vast-nfs
                      nfs:
                          server: aics.vast01.corp.alleninstitute.org
                          path: /aics
            extra_container_config:
                imagePullPolicy: Always
                volumeMounts:
                    - name: vast-nfs
                      mountPath: /allen/aics
                resources:
                    limits:
                        cpu: "4000m"
                        memory: "20Gi"
                        nvidia.com/gpu: 0
                    requests:
                        cpu: "500m"
                        memory: "1Gi"
        deploy_mode: local
        n_workers: 5

# default gpu steps
gpu_step_overrides:
    resources:
        limits:
            cpu: "4000m"
            memory: "100Gi"
            nvidia.com/gpu: "1"
        requests:
            cpu: "1000m"
            memory: "50Gi"
            nvidia.com/gpu: "1"

steps:
    - function: morflowgenesis.steps.image_object_from_csv.generate_objects
      args:
        csv_path: "//allen/aics/assay-dev/users/Benji/CurrentProjects/seg_quality_across_colonies/replicate/data.csv"
        working_dir: ${working_dir}
        source_column: "raw"
        non_source_columns: 
          - seg
      step_type: "gather"

    # watershed on transfer function lamin
    - function: morflowgenesis.steps.segmentation_seeded_watershed.run_watershed
      args:
        output_name: watershed
        raw_input_step: generate_objects_raw
        seg_input_step: generate_objects_seg
        mode: 'centroid'

    # - function: morflowgenesis.steps.single_cell_dataset.single_cell_dataset
    #   args:
    #     output_name: movie
    #     splitting_step: run_watershed_watershed
    #     raw_steps: [generate_objects_raw]
    #     seg_steps: [generate_objects_seg, run_watershed_watershed]
    #     seg_steps_rename: [movie, watershed]
    #     keep_lcc: True
    #     mask: False

    - function: morflowgenesis.steps.feature_calculation.calculate_features
      args:
        output_name: movie
        input_step: single_cell_dataset_movie
        segmentation_columns: [crop_seg_path]
        features:
            - shcoeff
            - volume
            - height

    # - function: morflowgenesis.steps.contact_sheet.segmentation_contact_sheet
    #   args:
    #     output_name: movie
    #     single_cell_dataset_step: single_cell_dataset_movie
    #     feature_step: calculate_features_movie
    #     x_characteristic: volume_crop_seg_path_crop_seg_movie
    #     y_characteristic: height_crop_seg_path_crop_seg_movie
    #     seg_channels: [0,1]

    # - function: morflowgenesis.steps.plot.run_plot
    #   args:
    #     output_name: plot
    #     input_step: get_features_matched_features
    #     pca_n_components: 10
    #     features:
    #         - shcoeff
    #         - volume
    #         - height


